os.loadAPI("/rpgGame/config")
places = {}

--the message api
function msg(text, time)
	term.setBackgroundColor(colors.white)
	paintutils.drawFilledBox(3, 3, #tostring(text) + 6, 5)
	term.setCursorPos(5, 4)
	print(text)
	sleep(time)
	term.setBackgroundColor(colors.blue)
end

--returns an item wich can be found by the player. it can be added to a place
function newItem(name, description, x, y, width, height, color, foundFunc, useFunc)
	return {
		name = name,
		description = description,
		x = x,
		y = y,
		width = width,
		height = height,
		color = color,
		foundFunc = foundFunc,
		useFunc = useFunc,
		found = false
	}
end

--returns a dialog wich is used in npcs (newNPC() function)
function newDialog(texts, endText, endFunc, speakedToFunc)
	return {
		texts = texts,
		endText = endText,
		endFunc = endFunc,
		speakedto = false,
		speakedToFunc = speakedToFunc,
		play = function(self)
			if self.speakedto then
				msg(self.endText, 1)
				os.pullEventRaw()
				self.speakedToFunc()
			else
				for k, text in pairs(self.texts) do
					msg(text, 0.2)
					os.pullEventRaw()
					draw()
				end
				endFunc()
				self.speakedto = true
			end
		end
	}
end

--returns a new npc wich can be added on a place in the newPlace function
function newNPC(x, y, name, dialog, texture)
	return {
		x = x,
		y = y,
		name = name,
		dialog = dialog,
		texture = texture
	}
end

--returns a portal wich can be added on a place in the newPlace function
function newPortal(x, y, destination, outx, outy)
	return {
		x = x,
		y = y,
		destination = destination,
		outx = outx,
		outy = outy
	}
end

--Adds the place to the place table. The program can use it now
function addPlace(place)
	if not localplace then localplace = place end
	places[place.picture_name] = place
end

--Returns a place wich can be insertet with addPlace.
function newPlace(color, picture_name, place_name, portals, npcs, items)
	local pic = paintutils.loadImage("/rpgGame/pictures/"..picture_name)
	return {
		color = color,
		items = items,
		npcs = npcs,
		picture_name = picture_name,
		picture = pic,
		place_name = place_name,
		portals = portals,
		draw = function(self)
			
		end
	}
end

--the player stats table
hero = {
	items = {},
	name = "Hearold",
	x = 10,
	y = 15,
	teleport = function(self, x, y)
	end,
	openItems = function(self)
		term.setBackgroundColor(colors.white)
		paintutils.drawFilledBox(3, 3, config.invent.width, config.invent.height)
		term.setBackgroundColor(colors.gray)
		paintutils.drawBox(3, 3, config.invent.width, config.invent.height)
		term.setCursorPos(3, 3)
		print("Items")
		term.setBackgroundColor(colors.white)
		local x = 5
		local y = 5
		local num = 1
		for i = 1, #self.items do
			item = self.items[i]
			if term.getBackgroundColor() ~= item.color then
				term.setTextColor(item.color)
			elseif term.getBackgroundColor() ~= colors.white then
				term.setTextColor(colors.white)
			else
				term.setTextColor(colors.black)
			end
			term.setCursorPos(x, y)
			print(num.." "..item.name)
			y = y + 1
			num = num + 1
		end
		sleep(0.3)
		local event, num = os.pullEventRaw()
		if self.items[num-1] then
			msg("Description: "..self.items[num-1].description, 0.3)
			os.pullEventRaw()
			draw()
			msg("Press 'u' to use "..self.items[num-1].name, 0.3)
			local event, key, hold = os.pullEvent("key")
			if keys.getName(key) == "u" then
				self.items[num-1].useFunc()
			end
		end
		draw()
	end,
	getItem = function(self, item)
		msg("You found an "..item.name.."!", 1.3)
		draw()
		msg("Stored in inventory.", 0.6)
		self.items[#self.items+1] = item
	end,
	move = function(self, pos)
		self.x = self.x + pos[1]
		self.y = self.y + pos[2]
		for k, portal in pairs(localplace.portals) do
			if portal.x == self.x and portal.y == self.y then
				localplace = places[portal.destination]
				msg("Moving to "..localplace.place_name, 1.2)
				self.x = portal.outx
				self.y = portal.outy
			end
		end
		if localplace.npcs then
			for k, npc in pairs(localplace.npcs) do
				if npc.x == self.x and npc.y == self.y then
					npc.dialog:play()
				end
			end
		end
		if localplace.items then
			for k, item in pairs(localplace.items) do
				if item.x <= self.x and item.y <= self.y then
					if item.x + item.width >= self.x and item.y + item.height >= self.y then
						if not item.found then
							item.found = true
							self:getItem(item)
						end
					end
				end
			end
		end
	end
}

--draws everything
function draw()
	if not localplace then
		error("No place added!")
	end
	term.setBackgroundColor(localplace.color)
	term.clear()
	term.setCursorPos(1, 1)
	paintutils.drawImage(localplace.picture, 1, 2)
	for k, portal in pairs(localplace.portals) do
		term.setCursorPos(portal.x, portal.y)
		print(0)
	end
	if localplace.npcs then
		for k, npc in pairs(localplace.npcs) do
			term.setCursorPos(npc.x, npc.y)
			print(npc.texture)
		end
	end
	term.setBackgroundColor(colors.gray)
	paintutils.drawFilledBox(1, 1, 4, 1)
	term.setCursorPos(1, 1)
	print(localplace.place_name)

	term.setTextColor(colors.black)
	term.setBackgroundColor(colors.blue)

	--draws hero
	term.setCursorPos(hero.x, hero.y)
	print("Y")
end

--waits for any input and moves player and other stuff
function playerInput()
	local event, var1, var2, var3 = os.pullEventRaw()
	if event == "key" then
		local key = keys.getName(var1)
		if config.keys.moveKeys[key] then
			hero:move(config.keys.moveKeys[key])
		elseif key == config.keys.quit then
			msg("Game quited", 0.5)
			os.reboot()
		elseif key == config.keys.items then
			hero:openItems()
		end
	end
end

--main function
function main()
	while true do
		draw()
		playerInput()
	end
end